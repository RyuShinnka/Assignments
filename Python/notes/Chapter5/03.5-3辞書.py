# 5-3-2　辞書の作成
# 書式：　　辞書＝｛キー1:値1,キー2:値2,…｝
# 辞書の作成例（jisho01.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
print(dct) # {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
# 「101」「102」「103」がキー、それに対応する値が「abc」「xyz」「[10, 30, 20]」である辞書を作成した。

# キーが重複した場合の例（jisho02.py）
dct = {101: 'abc', 102: 'xyz', 101: [10, 30, 20]}
print(dct) # {101: [10, 30, 20], 102: 'xyz'}
# 「101」がキーとして重複しているため、値が上書きされ、「[10, 30, 20]」が代入された。

# ############################################################################
# 5-3-3
# 辞書から値を取り出す　例：jisho03.py
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
print(dct[102]) # xyz
# 「102」がキーとして存在するので、その値「xyz」が出力される。

# 辞書にスライス使えない例（jisho04.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
dct[:2] # TypeError: 'dict_keys' object is not subscriptable
# 辞書のキーはリスト型のため、スライスを使えない。

# getメソッドを使う例（jisho05.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
print(dct.get(101)) # abc
print(dct.get(999)) # None
# getメソッドを使うと、キーが存在しない場合にデフォルト値を返すことができる。
print(dct.get(999, 'ありません')) # ありません
# 「999」がキーとして存在しないので、デフォルト値「ありません」が出力される。

# ############################################################################
# 5-3-4 辞書の内容を変更する
# 辞書は一度作成すると、後からキーを変更できません。ただし、キーに対応する値については変更可能です
# 例：jisho06.py
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
dct[103] = 'ABC'
print(dct) # {101: 'abc', 102: 'xyz', 103: 'ABC'}
# 「103」がキーとして存在するので、その値「ABC」が代入された。

# 要素を追加する例（jisho07.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
dct[201] = '123'
print(dct) # {101: 'abc', 102: 'xyz', 103: [10, 30, 20], 201: '123'}
# 「201」がキーとして追加されたので、その値「123」が代入された。

# 要素を削除する例（jisho08.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
del dct[103]
print(dct) # {101: 'abc', 102: 'xyz'}
# 「103」がキーとして存在するので、その要素が削除された。
# 指定したキーが存在しない場合は、KeyErrorが発生します。

# 要素の削除に失敗した例（jisho09.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
del dct[999] # KeyError: 999
# 「999」がキーとして存在しないので、KeyErrorが発生します。

# そのため、リストと同じようにIN演算子を使って、キーが存在するかどうかを確認してから削除する方が安全です。
# 　inとdelを組み合わせた例（jisho10.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
if 999 in dct:
    del dct[999]
print(dct) # {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
# 「999」がキーとして存在しないので、何も起こりません。

# ############################################################################
# 5-3-5 キーの集まりを取り出す
# keysメソッドを使うと、辞書からキーの集まりだけをリストのような形で取り出すことができます。
# keysメソッドを使う例（jisho11.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
ks = dct.keys()
print(ks) # dict_keys([101, 102, 103])
# 辞書のキーだけをリストのような形で取り出した。
dct[104] = 'XYZ'
print(ks) # dict_keys([101, 102, 103, 104])
# 辞書にキーが追加されたので、keysメソッドで取り出したリストも更新されます。

# ############################################################################
# 5-3-6 キーと値をセットで取り出す
# itemsメソッドを使うと、キーと値のセットをタプルにしたものをリストのようなもので取り出すことができます。
# itemsメソッドを使う例（jisho12.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
items = dct.items()
print(items) # dict_items([(101, 'abc'), (102, 'xyz'), (103, [10, 30, 20])])
dct[103] = 'XYZ'
print(items) # dict_items([(101, 'abc'), (102, 'xyz'), (103, 'XYZ')])
# 辞書にキーが追加されたので、itemsメソッドで取り出したリストも更新されます。

# 辞書の値が存在するか確認する　例（jisho_values01.py）
dct = {101: 'abc', 102: 'xyz', 103: [10, 30, 20]}
if 'xyz' in dct.values():
    print('存在する')
else:
    print('存在しない')
# 「'xyz'」が値として存在するので、「存在する」が出力されます。
# 一度valuesメソッドを使って取り出した値の集まりからであれば、in演算子で確認することができます。


